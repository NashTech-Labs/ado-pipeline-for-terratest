trigger: none

# setup the varibale group to fetch the credential information

variables:
  - group: Azure_credential


jobs:
- job: Build

# define the pool for thr ADO agent

  pool:
    name: Default


# Script that will create the folder where the repo will checkout
  steps:
    - script: |
        echo $(System.DefaultWorkingDirectory)
        currentPath=$(dirname "$(System.DefaultWorkingDirectory)")
        mkdir "$currentPath/terratest"
        pwd
      displayName: 'Create folders'

# checkout the repository

    - checkout: self
      displayName: 'Checkout main repo'
      path: terratest
      clean: true
      

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.8'
        addToPath: true


    - script: |
        python3 --version
      displayName: 'Verify Python Installation'

# terraform installation

    - script: |
        sudo apt-get update
        sudo apt-get install -y unzip
        curl -LO https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
        unzip terraform_1.5.0_linux_amd64.zip
        rm -rf terraform_1.*
        sudo mv terraform /usr/local/bin/
        terraform --version
      displayName: 'Install Terraform'
      
# verify the terraform version
    - script: |
        terraform version
      displayName: 'Verify Python Installation'

    - script: |
        curl -LO https://golang.org/dl/go1.17.2.linux-amd64.tar.gz
        sudo tar -C /usr/local -xzf go1.17.2.linux-amd64.tar.gz
        rm -rf go1.*
        export GOROOT=/usr/local/go
        export GOPATH=$(HOME)/go
        export PATH=$GOROOT/bin:$GOPATH/bin:$PATH
        echo "export GOROOT=/usr/local/go" >> $(HOME)/.bashrc
        echo "export GOPATH=$(HOME)/go" >> $(HOME)/.bashrc
        echo "export PATH=\$GOROOT/bin:\$GOPATH/bin:\$PATH" >> $(HOME)/.bashrc
        source $(HOME)/.bashrc
        go version
      displayName: 'Install Go'

# check the version of go

    - script: |
       ls /usr/local/go
       export PATH=$PATH:/usr/local/go/bin
       go version
      displayName: 'checking GO version'


# just printing the values of the credential which i have define in the environment.
      
    - script: |
        go version
        echo $(ARM_CLIENT_ID)
        echo $(ARM_CLIENT_SECRET)
        echo $(ARM_TENANT_ID)
        echo $(ARM_SUBSCRIPTION_ID)
      displayName: 'Print the variable'


# exporting the credential in the agent

    - task: Bash@3
      displayName: 'Export Variables'
      inputs:
        targetType: 'inline'
        script: |
          if [ "$AGENT_OS" == "Linux" ]; then
            export ARM_SUBSCRIPTION="$ARM_SUBSCRIPTION_ID"
            export ARM_CLIENT="$ARM_CLIENT_ID"
            export ARM_TENANT="$ARM_TENANT_ID"
            export ARM_CLIENT_SECRET_ID="$ARM_CLIENT_SECRET"

          elif [ "$AGENT_OS" == "Windows_NT" ]; then
            export ARM_SUBSCRIPTION_ID="$ARM_SUBSCRIPTION_ID"
            export ARM_CLIENT_ID="$ARM_CLIENT_ID"
            export ARM_TENANT_ID="$ARM_TENANT_ID"
            export ARM_CLIENT_SECRET="$ARM_CLIENT_SECRET"
          fi

# printing the exported values to verify

    - script: |
        echo "ARM_SUBSCRIPTION: $ARM_SUBSCRIPTION_ID"
        echo "ARM_CLIENT: $ARM_CLIENT_ID"
        echo "ARM_TENANT: $ARM_TENANT_ID"
        echo "ARM_CLIENT_SECRET_ID: $ARM_CLIENT_SECRET"
      displayName: 'Print Environment Variables'


# install the required tool for terraform run

    - task: Bash@3
      displayName: 'Install Build Tools'
      inputs:
        targetType: 'inline'
        script: |
          # Install build tools (gcc, make, etc.)
          sudo apt-get update
          sudo apt-get install -y build-essential
          
          # Check the installed version of gcc
          gcc --version
          
# script to run the terratest code 

    - script: |
          export PATH=$PATH:/usr/local/go/bin
          pwd
          cd terratest
          go get github.com/gruntwork-io/terratest/modules/terraform
          go mod init github.com/test/subscription-module-test
          go mod tidy
          go get github.com/gruntwork-io/terratest/modules/terraform
          go test -v -timeout 50m
      displayName: 'Initialize the go and run test'
